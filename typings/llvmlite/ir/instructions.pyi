"""
This type stub file was generated by pyright.
"""

from llvmlite.ir.values import AttributeSet, NamedValue
from llvmlite.ir._utils import _HasMetadata

"""
Implementation of LLVM IR instructions.
"""

class Instruction(NamedValue, _HasMetadata):
    def __init__(self, parent, typ, opname, operands, name=..., flags=...) -> None: ...
    @property
    def function(self): ...
    @property
    def module(self): ...
    def descr(self, buf): ...
    def replace_usage(self, old, new): ...
    def __repr__(self): ...

class CallInstrAttributes(AttributeSet):
    _known = ...

TailMarkerOptions = ...

class FastMathFlags(AttributeSet):
    _known = ...

class CallInstr(Instruction):
    def __init__(
        self,
        parent,
        func,
        args,
        name=...,
        cconv=...,
        tail=...,
        fastmath=...,
        attrs=...,
        arg_attrs=...,
    ) -> None: ...
    @property
    def callee(self): ...
    @callee.setter
    def callee(self, newcallee): ...
    @property
    def args(self): ...
    def replace_callee(self, newfunc): ...
    @property
    def called_function(self):
        """The callee function"""
        ...
    def descr(self, buf): ...

class InvokeInstr(CallInstr):
    def __init__(
        self,
        parent,
        func,
        args,
        normal_to,
        unwind_to,
        name=...,
        cconv=...,
        fastmath=...,
        attrs=...,
        arg_attrs=...,
    ) -> None: ...
    def descr(self, buf): ...

class Terminator(Instruction):
    def __init__(self, parent, opname, operands) -> None: ...
    def descr(self, buf): ...

class PredictableInstr(Instruction):
    def set_weights(self, weights): ...

class Ret(Terminator):
    def __init__(self, parent, opname, return_value=...) -> None: ...
    @property
    def return_value(self): ...
    def descr(self, buf): ...

class Branch(Terminator): ...
class ConditionalBranch(PredictableInstr, Terminator): ...

class IndirectBranch(PredictableInstr, Terminator):
    def __init__(self, parent, opname, addr) -> None: ...
    @property
    def address(self): ...
    def add_destination(self, block): ...
    def descr(self, buf): ...

class SwitchInstr(PredictableInstr, Terminator):
    def __init__(self, parent, opname, val, default) -> None: ...
    @property
    def value(self): ...
    def add_case(self, val, block): ...
    def descr(self, buf): ...

class Resume(Terminator): ...

class SelectInstr(Instruction):
    def __init__(self, parent, cond, lhs, rhs, name=..., flags=...) -> None: ...
    @property
    def cond(self): ...
    @property
    def lhs(self): ...
    @property
    def rhs(self): ...
    def descr(self, buf): ...

class CompareInstr(Instruction):
    OPNAME = ...
    VALID_OP = ...
    def __init__(self, parent, op, lhs, rhs, name=..., flags=...) -> None: ...
    def descr(self, buf): ...

class ICMPInstr(CompareInstr):
    OPNAME = ...
    VALID_OP = ...
    VALID_FLAG = ...

class FCMPInstr(CompareInstr):
    OPNAME = ...
    VALID_OP = ...
    VALID_FLAG = ...

class CastInstr(Instruction):
    def __init__(self, parent, op, val, typ, name=...) -> None: ...
    def descr(self, buf): ...

class LoadInstr(Instruction):
    def __init__(self, parent, ptr, name=..., typ=...) -> None: ...
    def descr(self, buf): ...

class StoreInstr(Instruction):
    def __init__(self, parent, val, ptr) -> None: ...
    def descr(self, buf): ...

class LoadAtomicInstr(Instruction):
    def __init__(self, parent, ptr, ordering, align, name=..., typ=...) -> None: ...
    def descr(self, buf): ...

class StoreAtomicInstr(Instruction):
    def __init__(self, parent, val, ptr, ordering, align) -> None: ...
    def descr(self, buf): ...

class AllocaInstr(Instruction):
    def __init__(self, parent, typ, count, name) -> None: ...
    def descr(self, buf): ...

class GEPInstr(Instruction):
    def __init__(
        self, parent, ptr, indices, inbounds, name, source_etype=...
    ) -> None: ...
    def descr(self, buf): ...

class PhiInstr(Instruction):
    def __init__(self, parent, typ, name, flags=...) -> None: ...
    def descr(self, buf): ...
    def add_incoming(self, value, block): ...
    def replace_usage(self, old, new): ...

class ExtractElement(Instruction):
    def __init__(self, parent, vector, index, name=...) -> None: ...
    def descr(self, buf): ...

class InsertElement(Instruction):
    def __init__(self, parent, vector, value, index, name=...) -> None: ...
    def descr(self, buf): ...

class ShuffleVector(Instruction):
    def __init__(self, parent, vector1, vector2, mask, name=...) -> None: ...
    def descr(self, buf): ...

class ExtractValue(Instruction):
    def __init__(self, parent, agg, indices, name=...) -> None: ...
    def descr(self, buf): ...

class InsertValue(Instruction):
    def __init__(self, parent, agg, elem, indices, name=...) -> None: ...
    def descr(self, buf): ...

class Unreachable(Instruction):
    def __init__(self, parent) -> None: ...
    def descr(self, buf): ...

class InlineAsm:
    def __init__(self, ftype, asm, constraint, side_effect=...) -> None: ...
    def descr(self, buf): ...
    def get_reference(self): ...
    def __str__(self) -> str: ...

class AtomicRMW(Instruction):
    def __init__(self, parent, op, ptr, val, ordering, name) -> None: ...
    def descr(self, buf): ...

class CmpXchg(Instruction):
    """This instruction has changed since llvm3.5.  It is not compatible with
    older llvm versions.
    """

    def __init__(self, parent, ptr, cmp, val, ordering, failordering, name) -> None: ...
    def descr(self, buf): ...

class _LandingPadClause:
    def __init__(self, value) -> None: ...
    def __str__(self) -> str: ...

class CatchClause(_LandingPadClause):
    kind = ...

class FilterClause(_LandingPadClause):
    kind = ...
    def __init__(self, value) -> None: ...

class LandingPadInstr(Instruction):
    def __init__(self, parent, typ, name=..., cleanup=...) -> None: ...
    def add_clause(self, clause): ...
    def descr(self, buf): ...

class Fence(Instruction):
    """
    The `fence` instruction.

    As of LLVM 5.0.1:

    fence [syncscope("<target-scope>")] <ordering>  ; yields void
    """

    VALID_FENCE_ORDERINGS = ...
    def __init__(self, parent, ordering, targetscope=..., name=...) -> None: ...
    def descr(self, buf): ...

class Comment(Instruction):
    """
    A line comment.
    """

    def __init__(self, parent, text) -> None: ...
    def descr(self, buf): ...
